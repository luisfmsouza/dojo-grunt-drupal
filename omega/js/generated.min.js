(function($, window) {
    "use strict";
    $.matchmedia = function(query) {
        return window.matchMedia(query);
    };
    var event = $.event.special.mediaquery = {
        objects: {},
        handler: function(handler) {
            return function(mql) {
                mql.applies = mql.matches;
                handler.call(mql, mql);
            };
        },
        add: function(handleObj) {
            event.objects[handleObj.guid] = window.matchMedia(handleObj.data);
            event.objects[handleObj.guid].addListener(event.handler(handleObj.handler));
        },
        remove: function(handleObj) {
            event.objects[handleObj.guid].removeListener(event.handler(handleObj.handler));
        }
    };
    $.fn.mediaquery = function(query, callback) {
        return $(this).bind("mediaquery", query, callback);
    };
})(jQuery, window);

(function($) {
    "use strict";
    var resizeTimeout;
    var event = $.event.special.resizeend = {
        setup: function() {
            $(this).bind("resize", event.handler);
        },
        teardown: function() {
            $(this).unbind("resize", event.handler);
        },
        handler: function(e) {
            var context = this;
            if (resizeTimeout) {
                clearTimeout(resizeTimeout);
            }
            resizeTimeout = setTimeout(function() {
                e.type = "resizeend";
                $(context).trigger(e);
            }, 150);
        }
    };
    $.fn.resizeend = function(handler) {
        return $(this).bind("resizeend", handler);
    };
})(jQuery);

(function($) {
    "use strict";
    $.expr[":"].scrollable = function(elem) {
        var scrollable = true;
        var original = $(elem).scrollTop();
        if (original === 0) {
            $(elem).scrollTop(1);
            scrollable = $(elem).scrollTop() === 1;
            $(elem).scrollTop(0);
        }
        return scrollable;
    };
})(jQuery);

(function($) {
    $("html").removeClass("no-js");
})(jQuery);

(function($) {
    "use strict";
    Drupal.behaviors.omegaThemeSettingsLayouts = {
        attach: function(context) {
            $(".form-item-omega-layout .omega-layout-icon", context).click(function() {
                $(this).siblings(".form-item").find("input").click().change();
            });
        }
    };
    Drupal.behaviors.omegaExtensionSummary = {
        attach: function(context) {
            $("fieldset[id^=edit-].omega-extension", context).each(function() {
                var extension = $(this).attr("id").substring(5);
                var $fieldset = $(this);
                var $checkbox = $fieldset.find('input[name="omega_toggle_extension_' + extension + '"]');
                $fieldset.drupalSetSummary(function() {
                    if (!$checkbox.is(":checked")) {
                        return Drupal.t("This extension is currently disabled");
                    }
                });
                $checkbox.change(function() {
                    $fieldset.trigger("summaryUpdated");
                });
            });
        }
    };
})(jQuery);

(function($) {
    "use strict";
    Drupal.behaviors.omegaBrowserWidth = {
        attach: function(context) {
            $("body", context).once("omega-browser-width", function() {
                var $indicator = $('<div class="omega-browser-width" />').appendTo(this);
                $(window).bind("resize.omega-browser-width", function() {
                    $indicator.text($(this).width() + "px");
                }).trigger("resize.omega-browser-width");
            });
        }
    };
})(jQuery);

(function($, window, Drupal) {
    "use strict";
    Drupal.behaviors.omegaMediaQueryClasses = {
        handler: function(name, mql) {
            if (mql.matches) {
                $("body").removeClass(name + "-inactive").addClass(name + "-active");
            } else {
                $("body").removeClass(name + "-active").addClass(name + "-inactive");
            }
        },
        attach: function(context, settings) {
            var behavior = this;
            var omegaSettings = settings.omega || {};
            var mediaQueries = omegaSettings.mediaQueries || {};
            $("body", context).once("omega-mediaqueries", function() {
                $.each(mediaQueries, function(index, value) {
                    var mql = window.matchMedia(value);
                    behavior.handler(index, mql);
                    mql.addListener(function(mql) {
                        behavior.handler(index, mql);
                    });
                });
            });
        }
    };
})(jQuery, window, Drupal);